// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  password         String
  role             Role
  projects         Project[] @relation("ProjectOwner")
  assignedTasks    Task[]    @relation("TaskAssignment")
  assignedProjects Project[] @relation("ProjectAssignments") // Nueva relación
  refreshToken     String? // Para manejar la autenticación con Refresh Tokens
}

model Project {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  owner         User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId       Int
  assignedUsers User[]        @relation("ProjectAssignments") // Relación existente
  tasks         Task[]
  status        ProjectStatus @default(IN_PROGRESS)
  createdAt     DateTime      @default(now())
}

model Task {
  id           Int          @id @default(autoincrement())
  title        String
  description  String?
  project      Project      @relation(fields: [projectId], references: [id])
  projectId    Int
  assignedTo   User         @relation("TaskAssignment", fields: [assignedToId], references: [id])
  assignedToId Int
  status       TaskStatus   @default(PENDING)
  priority     TaskPriority @default(MEDIUM)
  createdAt    DateTime     @default(now())
}

enum Role {
  ADMIN
  USER
  SUPERVISOR
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
